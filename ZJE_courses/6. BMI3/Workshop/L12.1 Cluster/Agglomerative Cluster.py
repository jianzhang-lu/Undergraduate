import numpy as np
import numpy.typing as npt


def Distance(cluster1: npt.NDArray, cluster2: npt.NDArray):
    return np.sqrt(np.sum(np.square(cluster2-cluster1)))


# 找到目前距离最小的两个cluster对应的index
def Minimal_Distance(cluster: list, visit: list):
    min_dis = float('inf')
    min_index = []

    for i in range(len(cluster)):
        if not visit[i]:
            cluster1 = np.mean(cluster[i], axis=0)
            for j in range(i):
                cluster2 = np.mean(cluster[j], axis=0)
                cur_dis = Distance(cluster1, cluster2)
                if cur_dis < min_dis:
                    min_dis = cur_dis
                    min_index = [j, i]
    return min_index


def Combine_cluster(cluster: list, min_index):
    cluster2 = cluster[min_index[1]]
    for i in cluster2:
        cluster[min_index[0]].append(i)
    return cluster


# labels最初始是[1, 2, 3, 4..... 70]
def Agglomerative(expression: npt.NDArray, k: int, labels):
    cluster = [[i] for i in expression]
    visit = [False for _ in range(len(expression))]

    while True:
        min_index = Minimal_Distance(cluster, visit)

        # 更改cluster列表 将两个最近的index合并成一个 合成到靠前元素的位置
        cluster = Combine_cluster(cluster, min_index)
        visit[min_index[1]] = True

        # 更改labels列表
        label_min = min(labels[min_index[0]], labels[min_index[1]])
        label_max = max(labels[min_index[0]], labels[min_index[1]])
        for i in range(len(labels)):
            if labels[i] == label_max:
                labels[i] = label_min

        # 退出条件
        if len(np.unique(labels)) == k:
            break
    return labels


expre_list = [0.0,1.0,0.060589917,0.6078392,0.05707598,0.13139854,0.23474589,
0.069104865,1.0,0.16628313,0.79999954,0.0,0.31341663,0.52361435,
0.50480974,0.0,0.37580776,1.0,0.18260273,0.33233047,0.8222764,
0.35623527,0.063516535,0.036661115,0.39631352,0.47950053,0.0,1.0,
0.93688214,0.0,0.01873576,0.027993299,0.90675485,1.0,0.42967153,
0.67342836,0.3483879,0.2756076,1.0,0.33544347,0.0,0.7118344,
0.43328527,0.7128082,0.0,0.6231534,0.06383052,0.55941635,1.0,
1.0,0.0,0.019661328,0.11260553,0.95971465,0.62447584,0.72388595,
0.12140282,0.012210715,0.0,0.010418758,0.2572015,0.32562333,1.0,
0.39150682,0.08119159,0.37965184,0.0,0.665275,1.0,0.413579,
1.0,0.09925249,0.04576631,0.0,0.8681613,0.716264,0.91379964,
0.24299988,1.0,0.31721213,0.71229166,0.0,0.4261144,0.48148072,
0.5151133,0.3959297,0.5909588,1.0,0.7772712,0.0,0.4163539,
0.08556023,0.8544896,0.5755508,1.0,0.114312045,0.0,0.70650965,
0.9277,0.0,0.014798848,0.19118288,0.7200272,1.0,0.8934204,
0.02122658,0.8553018,0.436639,0.94457334,0.0,0.4213514,1.0,
0.15975215,0.25635937,1.0,0.5071784,0.31039956,0.0,0.3084001,
0.12464911,0.0,0.04875702,0.00296763,1.0,0.014872247,0.014990934,
0.8909176,0.0,0.38672313,0.4612493,0.70617163,1.0,0.7426287,
0.59120566,0.08853322,1.0,0.0,0.6646734,0.21408176,0.0036336938,
0.9649206,0.015519824,0.0,0.2151058,0.8881033,1.0,0.83664304,
0.8243905,0.1370449,1.0,0.0495544,0.86772716,0.33865008,0.0,
0.18386291,1.0,0.43067342,0.90327096,0.0,0.39881846,0.6201938,
0.8909843,0.025059365,0.5708418,0.0,0.97634095,1.0,0.14930665,
0.0,0.7853886,0.16166511,1.0,0.1864514,0.04308833,0.83702165,
0.6596226,0.0,1.0,0.17003568,0.6181329,0.18534867,0.42867658,
0.36167958,0.049047787,1.0,0.33891842,0.16558124,0.0,0.21517621,
0.083251394,0.03247968,0.07904713,0.0,1.0,0.025908666,0.07231029,
1.0,0.11686746,0.43177763,0.0,0.42735,0.8404008,0.5002315,
0.8014429,0.0029482713,0.0,0.0038645072,0.7678098,0.3209569,1.0,
0.26442593,0.19070362,0.20626186,1.0,0.0,0.20989877,0.88554084,
0.059607513,0.0,0.03154371,0.004230938,1.0,0.005306822,0.043227047,
0.10356657,1.0,0.032792173,0.88704515,0.0,0.5238936,0.59641045,
0.24828225,1.0,0.123261064,0.88886553,0.0,0.61393017,0.6354413,
0.034579653,0.5004902,0.22735715,1.0,0.0,0.028798051,0.5053616,
0.1672542,0.077641875,0.09904667,0.10246423,1.0,0.0,0.1671103,
0.24726881,1.0,0.94488615,0.56253105,0.0,0.022391275,0.07413552,
0.6751937,0.0,0.40973222,0.1817434,1.0,0.27810022,0.32570955,
0.38547555,1.0,0.33927566,0.85814434,0.0,0.59435123,0.67480874,
0.14114036,0.031271428,0.12074016,0.0,1.0,0.030879373,0.15501046,
0.39926645,0.35857645,1.0,0.37258238,0.07993995,0.11142235,0.0,
0.42597064,0.08112112,0.16946295,0.0,1.0,0.067177445,0.20728408,
0.0,1.0,0.1648946,0.7144039,0.07026702,0.16199553,0.53334594,
0.67252517,0.5561315,1.0,0.5256199,0.3851064,0.36752418,0.0,
1.0,0.0,0.16340844,0.13076149,0.9156464,0.81890285,0.756588,
0.051664967,0.24516118,0.1291385,0.27389386,1.0,0.0,0.3365229,
0.9649206,0.015519824,0.0,0.2151058,0.8881033,1.0,0.83664304,
0.7328727,0.052242972,0.060484085,0.0,0.714205,1.0,0.19546741,
1.0,0.51580733,0.6395779,0.0,0.87275785,0.6386096,0.4185843,
0.18386291,1.0,0.43067342,0.90327096,0.0,0.39881846,0.6201938,
0.124803245,1.0,0.20550154,0.91472816,0.0,0.30836576,0.63210565,
0.6766672,0.0,0.3992698,0.43921027,0.4549218,1.0,0.59346324,
0.07106059,0.6724632,0.0,0.80773175,0.5073105,0.30825177,1.0,
0.21071309,1.0,0.29376414,0.75391793,0.0,0.41261947,0.5645779,
0.052515358,0.0047079027,0.0,0.0,0.047605596,0.044100765,1.0,
0.96861863,0.31091887,0.3640951,0.0,0.5656046,0.29221678,1.0,
1.0,0.19915664,0.3131476,0.0,0.7951518,0.19766247,0.3053891,
0.53897905,0.21325576,0.73427,0.5169031,0.0,1.0,0.4369651,
0.5423364,0.13570255,0.27688307,0.0,0.7055,1.0,0.21556827,
0.06299353,0.5809379,0.0716003,1.0,0.15470278,0.0,0.8222811,
1.0,0.08082929,0.0,0.5627375,0.76146007,0.94839996,0.9664378,
0.122891955,0.38063264,0.59879297,1.0,0.0043783872,0.0,0.42534885,
0.07126206,0.4321693,1.0,0.43922126,0.1250032,0.0085400995,0.0,
1.0,0.05314308,0.0,0.021717418,0.83460313,0.7868712,0.936388,
0.60148364,0.0,0.16041425,0.21607661,1.0,0.33142042,0.36843553,
1.0,0.0,0.10953524,0.07381914,0.918531,0.9065937,0.64376205,
0.0,0.82233685,0.3794357,0.9835457,0.27763808,0.36618862,1.0,
0.04530147,0.46596932,1.0,0.6445137,0.12029567,0.0,0.08029161,
0.13206461,0.003635881,0.028393516,0.0,1.0,0.009115191,0.036789726,
0.26442593,0.19070362,0.20626186,1.0,0.0,0.20989877,0.88554084]

expression = np.array(expre_list).reshape(70, 7)
init_labels = [i for i in range(len(expression))]
labels = Agglomerative(expression, 7, init_labels)
print(labels)
