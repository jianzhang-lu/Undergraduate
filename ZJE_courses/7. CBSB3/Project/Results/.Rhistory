match(colnames(expe_summary_before)[-1], colnames(model_summary))
model_summary <- select(model_summary, all_of(match))
match <- match(colnames(expe_summary_before)[-1], colnames(model_summary))
model_summary <- select(model_summary, all_of(match))
match <- match(colnames(expe_summary_before)[-1], colnames(model_summary))
## 处理model data
model_data <- read.csv("Step3/painting/H/allresult_processed.csv")[, c(1, 4, 13:27, 30:33)]
length(unique(model_data$Subject))
success <- unique(model_data$Subject)
all <- unique(Param.df$Subject)
fail <- setdiff(all, success)
Param.df <- Param.df[-fail, ]
model_summary <- model_data %>%
group_by(Subject, afterbreak) %>%
summarise_all(mean)
### 改名字 便于匹配
colnames(model_summary)[c(15, 16, 18:21)] <- c('payoff', 'accuracy',
'dwmean_1', 'dwmean_2',
'dwmean_3', 'dwmean_4')
match <- match(colnames(expe_summary_before)[-1], colnames(model_summary))
model_summary %>%
filter(model_summary, afterbreak == 0)[, -c(1, 2)] %>%
select(all_of(match))
model_summary_before <- model_summary %>%
filter(afterbreak == 0)[, -c(1, 2)] %>%
select(all_of(match))
## 处理model data
model_data <- read.csv("Step3/painting/H/allresult_processed.csv")[, c(1, 4, 13:27, 30:33)]
length(unique(model_data$Subject))
success <- unique(model_data$Subject)
all <- unique(Param.df$Subject)
fail <- setdiff(all, success)
Param.df <- Param.df[-fail, ]
model_summary <- model_data %>%
group_by(Subject, afterbreak) %>%
summarise_all(mean)
### 改名字 便于匹配
colnames(model_summary)[c(15, 16, 18:21)] <- c('payoff', 'accuracy',
'dwmean_1', 'dwmean_2',
'dwmean_3', 'dwmean_4')
match <- match(colnames(expe_summary_before)[-1], colnames(model_summary))
model_summary %>%
filter(afterbreak == 0)[, -c(1, 2)]
model_summary %>%
filter(afterbreak == 0)
model_summary %>%
filter(afterbreak == 0) %>%
select(-c(1, 2))
model_summary %>%
filter(afterbreak == 0)
model_summary %>%
filter(afterbreak == 0) %>%
select(-c(1, 2))
model_summary <- as.data.frame(model_summary)
model_summary %>%
filter(afterbreak == 0) %>%
select(-c(1, 2))
model_summary_before <- model_summary %>%
filter(afterbreak == 0) %>%
select(-c(1, 2)) %>%
select(all_of(match))
match
match(colnames(expe_summary_before)[-1], colnames(model_summary)[-c(1, 2)])
match <- match(colnames(expe_summary_before)[-1], colnames(model_summary)[-c(1, 2)])
model_summary_before <- model_summary %>%
filter(afterbreak == 0) %>%
select(-c(1, 2)) %>%
select(all_of(match))
model_summary_after <- model_summary %>%
filter(afterbreak == 1) %>%
select(-c(1, 2)) %>%
select(all_of(match))
View(model_summary_before)
View(model_summary_after)
View(expe_summary_after)
# 针对before和after分别处理
## 计算experiment data的方差
before_devs <- c()
after_devs <- c()
for (i in 2:20){
before_devs <- c(before_devs, var(expe_summary_before[, i]))
after_devs <- c(after_devs, var(expe_summary_after[, i]))
}
# Weight等待确认
weight <- c(0.1, 1, 1, 0.5,
1, 1, 1, 1,
0.01, 0.01, 0.01, 0.01,
1, 1, 1, 1,
1, 1, 1)
PM_expe_before <- expe_summary_before[, -1] %>%
summarise_all(mean)
PM_expe_after <- expe_summary_after[, -1] %>%
summarise_all(mean)
View(PM_expe_after)
View(PM_expe_before)
expe_data[, 4]
PM_expe_after[, 4]
n=3
model_data[n, ]
data1 = model_summary_before
data1[n, ]
PM_model <- data1[n, ]
data2 = PM_expe_before
devs
devs = before_devs
(as.vector(t(((PM_model[, i]-data2[, i])^2)/devs[i])))
i=3
(as.vector(t(((PM_model[, i]-data2[, i])^2)/devs[i])))
PM_model[, i]
PM_model[, i]-data2[, i]
(PM_model[, i]-data2[, i])^2
devs[i]
((PM_model[, i]-data2[, i])^2)/devs[i]))
(((PM_model[, i]-data2[, i])^2)/devs[i])
t(((PM_model[, i]-data2[, i])^2)/devs[i]))
t(((PM_model[, i]-data2[, i])^2)/devs[i])))
t(((PM_model[, i]-data2[, i])^2)/devs[i]))
t(((PM_model[, i]-data2[, i])^2)/devs[i])
as.vector(t(((PM_model[, i]-data2[, i])^2)/devs[i]))
calc_error <- function(n, data1, data2, devs){
errors <- c()
PM_model <- data1[n, ]
for(i in 1:19){
error <- weight[i] * (as.vector(t(((PM_model[, i]-data2[, i])^2)/devs[i])))
errors <- c(errors, error)
}
return(errors)
}
paste0("Step3/", type, group, "/Paras.csv")
group = "H" # Hc HL L Lc LH
type = 'painting' # quote
paste0("Step3/", type, group, "/Paras.csv")
paste0("Step3/", type, "/", group, "/Paras.csv")
Param.df <- read.csv(setwd("CBSB3_workshop/Project/Results"))
Param.df <- read.csv(paste0("Step3/", type, "/", group, "/Paras.csv"))
View(Param.df)
paste0("../experiment_data/", type, "_summary.csv")
group = "H" # Hc HL L Lc LH
type = 'painting' # quote
Param.df <- read.csv(paste0("Step3/", type, "/", group, "/Paras.csv"))
## 处理expe data
expe_data <- read.csv(paste0("../experiment_data/", type, "_summary.csv"))[, c(2, 5:16, 21:27, 30:31)]
expe_data_before <- filter(expe_data, type == 'H', afterbreak == 0)[, c(-21, -22)]
expe_data_after <- filter(expe_data, type == 'H', afterbreak == 1)[, c(-21, -22)]
expe_summary_before <- expe_data_before %>%
group_by(ID) %>%
summarise_all(mean)
expe_summary_after <- expe_data_after %>%
group_by(ID) %>%
summarise_all(mean)
paste0("Step3/", type, "/", group, "/allresult_processed.csv")
## 处理model data
model_data <- read.csv(paste0("Step3/", type, "/", group, "/allresult_processed.csv"))[, c(1, 4, 13:27, 30:33)]
length(unique(model_data$Subject))
success <- unique(model_data$Subject)
all <- unique(Param.df$Subject)
fail <- setdiff(all, success)
Param.df <- Param.df[-fail, ]
model_summary <- model_data %>%
group_by(Subject, afterbreak) %>%
summarise_all(mean)
model_summary <- as.data.frame(model_summary)
### 改名字 便于匹配
colnames(model_summary)[c(15, 16, 18:21)] <- c('payoff', 'accuracy',
'dwmean_1', 'dwmean_2',
'dwmean_3', 'dwmean_4')
match <- match(colnames(expe_summary_before)[-1], colnames(model_summary)[-c(1, 2)])
model_summary_before <- model_summary %>%
filter(afterbreak == 0) %>%
select(-c(1, 2)) %>%
select(all_of(match))
model_summary_after <- model_summary %>%
filter(afterbreak == 1) %>%
select(-c(1, 2)) %>%
select(all_of(match))
# 针对before和after分别处理
## 计算experiment data的方差
before_devs <- c()
after_devs <- c()
for (i in 2:20){
before_devs <- c(before_devs, var(expe_summary_before[, i]))
after_devs <- c(after_devs, var(expe_summary_after[, i]))
}
PM_expe_before <- expe_summary_before[, -1] %>%
summarise_all(mean)
PM_expe_after <- expe_summary_after[, -1] %>%
summarise_all(mean)
calc_error <- function(n, data1, data2, devs){
errors <- c()
PM_model <- data1[n, ]
for(i in 1:19){
error <- weight[i] * (as.vector(t(((PM_model[, i]-data2[, i])^2)/devs[i])))
errors <- c(errors, error)
}
return(errors)
}
View(model_summary_after)
View(model_summary_before)
## Before break
before_errors <- c()
## Before break
before_errors <- c()
PM_error_before <- data.frame()
for(n in 1:nrow(model_summary_before)){
one_error <- calc_error(n, model_summary_before, PM_expe_before, before_devs)
before_errors <- c(before_errors, sum(one_error))
PM_error_before <- rbind(PM_error_before, one_error)
colnames(PM_error_before) <- colnames(model_summary_before)
}
weight <- c(1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1)
for(n in 1:nrow(model_summary_before)){
one_error <- calc_error(n, model_summary_before, PM_expe_before, before_devs)
before_errors <- c(before_errors, sum(one_error))
PM_error_before <- rbind(PM_error_before, one_error)
colnames(PM_error_before) <- colnames(model_summary_before)
}
before_errors
View(PM_error_before)
sum(PM_error_before[5,])
## After break
after_errors <- c()
PM_error_after <- data.frame()
## After break
after_errors <- c()
PM_error_after <- data.frame()
for(n in 1:nrow(model_summary_after)){
one_error <- calc_error(n, model_summary_after, PM_expe_after, after_devs)
after_errors <- c(after_errors, sum(one_error))
PM_error_after <- rbind(PM_error_after, one_error)
colnames(PM_error_after) <- colnames(model_summary_after)
}
rank(c(2,11,14,25,3))
## Find the top 20 minimal parameter
before_rank <- rank(before_errors)
after_rank <- rank(after_errors)
before_errors[before_rank]
rank(before_errors)
## Find the top 20 minimal parameter
before_rank <- order(before_errors)
after_rank <- order(after_errors)
before_errors[before_rank]
before_rank
before_errors[472]
View(Param.df)
param.df[500]
Param.df[500]
Param.df[498]
Param.df[498, ]
Param.df[500, ]
## Find the top 20 minimal parameter
before_rank <- order(before_errors)[1:20]
after_rank <- order(after_errors)[1:20]
before_para <- Param.df[before_rank, ]
View(before_para)
Param.df[472, ]
after_para <- Param.df[after_rank, ]
data.frame("Errors" = PM_error_before)
data.frame("Errors" = before_errors)
## Draw a plot to show the distribution of errors
plot_before <- data.frame("Errors" = before_errors)
View(plot_before)
plot_after <- data.frame("Errors" = after_errors)
ggplot(plot_before, aes(x = Errors)) +
geom_density()
ggplot(plot_before, aes(x = Errors)) +
geom_density(fill = 'blue')
ggplot(plot_before, aes(x = Errors)) +
geom_density(color = 'red')
ggplot(plot_before, aes(x = Errors)) +
geom_density(color = 'red', width = 2)
ggplot(plot_before, aes(x = Errors)) +
geom_density(color = 'red', linewidth = 2)
ggplot(plot_before, aes(x = Errors)) +
geom_density(color = 'red', linewidth = 1.5)
ggplot(plot_after, aes(x = Errors)) +
geom_density(color = "blue", linewidth = 1.5)
View(before_para)
View(after_para)
## Generate another Monte Carlo sets
second_before <- data.frame()
before_para <- Param.df[before_rank, ][, -1]
after_para <- Param.df[after_rank, ][, -1]
rep(0, 10)
add <- data.frame(a_schema = rep(0, 10),
h_schema = rep(0, 10),
Beta_N = runif(10, -0.06, 0.06),
Beta_Var= rep(0, 10),
a_generic  = rep(0, 10),
h_generic = rep(0, 10),
Beta_gN = runif(10, -0.1, 0.1),
Beta_gVar = rep(0, 10),
w = runif(10, -0.08, 0.08),
Phi = runif(10, -10, 10),
decay_speed = runif(10, -0.02, 0.02),
decay_speed_thres = runif(10, -0.01, 0.01),
thres_item_inter  = rep(0, 10),
thres_item_final = runif(10, -49, 49),
thres_schema = runif(10, -4.725, 4.725),
theta_shift = round((runif(10, -7.6, 7.6)), 0),
timevar = rep(0, 10),
modeltimestep = rep(0, 10))
View(add)
i=4
before_para[i, ]
c(before_para[i, ])
before_para[i, ] + add
c(before_para[i, ]) + add
## Generate another Monte Carlo sets
second_before <- data.frame()
second_after <- data.frame()
for(i in 1:20){
first_before <- c(before_para[i, ])
first_after <- c(after_para[i, ])
add <- data.frame(a_schema = rep(0, 10),
h_schema = rep(0, 10),
Beta_N = runif(10, -0.06, 0.06),
Beta_Var= rep(0, 10),
a_generic  = rep(0, 10),
h_generic = rep(0, 10),
Beta_gN = runif(10, -0.1, 0.1),
Beta_gVar = rep(0, 10),
w = runif(10, -0.08, 0.08),
Phi = runif(10, -10, 10),
decay_speed = runif(10, -0.02, 0.02),
decay_speed_thres = runif(10, -0.01, 0.01),
thres_item_inter  = rep(0, 10),
thres_item_final = runif(10, -49, 49),
thres_schema = runif(10, -4.725, 4.725),
theta_shift = round((runif(10, -7.6, 7.6)), 0),
timevar = rep(0, 10),
modeltimestep = rep(0, 10))
second_before <- rbind(second_before, first_before+add)
second_after <- rbind(second_after, first_after+add)
}
View(second_after)
View(second_before)
final_second_before <- second_before %>%
filter(w < 1 & Phi > 0 & decay_speed < 1 &
decay_speed_thres < 1 & theta_shift > 1 &
Beta_gN < 1 & Beta_N < 0.7)
View(final_second_before)
final_second_after <- second_after %>%
filter(w < 1 & Phi > 0 & decay_speed < 1 &
decay_speed_thres < 1 & theta_shift > 1 &
Beta_gN < 1 & Beta_N < 0.7)
View(final_second_before)
View(final_second_after)
View(Param.df)
View(final_second_after)
View(final_second_before)
View(Param.df)
final_second_before$Subject <- 1:nrow(final_second_before)
final_second_after$Subject <- 1:nrow(final_second_after)
final_second_before <- select(19, 1:18)
select(final_second_before, 19, 1:18)
final_second_before <- select(final_second_before, 19, 1:18)
final_second_after <- select(final_second_after, 19, 1:18)
paste0("Step3/", type, "_2/", group, "/Paras.csv")
type = 'quote'
paste0("Step3/", type, "_2/", group, "/Paras.csv")
paste0("Step3/", type, "_2/", group, "/bef_Paras.csv")
write.csv(final_second_before, output_before)
## 输出文件
output_before <- paste0("Step3/", type, "_2/", group, "/bef_Paras.csv")
output_after <- paste0("Step3/", type, "_2/", group, "/aft_Paras.csv")
write.csv(final_second_before, output_before)
write.csv(final_second_before, output_before, row.names = F)
group = "H" # Hc HL L Lc LH
type = 'painting' # quote
Param.df <- read.csv(paste0("Step3/", type, "/", group, "/Paras.csv"))
## 处理expe data
expe_data <- read.csv(paste0("../experiment_data/", type, "_summary.csv"))[, c(2, 5:16, 21:27, 30:31)]
expe_data_before <- filter(expe_data, type == group, afterbreak == 0)[, c(-21, -22)]
expe_data_after <- filter(expe_data, type == group, afterbreak == 1)[, c(-21, -22)]
expe_summary_before <- expe_data_before %>%
group_by(ID) %>%
summarise_all(mean)
expe_summary_after <- expe_data_after %>%
group_by(ID) %>%
summarise_all(mean)
## 处理model data
model_data <- read.csv(paste0("Step3/", type, "/", group, "/allresult_processed.csv"))[, c(1, 4, 13:27, 30:33)]
length(unique(model_data$Subject))
success <- unique(model_data$Subject)
all <- unique(Param.df$Subject)
fail <- setdiff(all, success)
Param.df <- Param.df[-fail, ]
model_summary <- model_data %>%
group_by(Subject, afterbreak) %>%
summarise_all(mean)
model_summary <- as.data.frame(model_summary)
### 改名字 便于匹配
colnames(model_summary)[c(15, 16, 18:21)] <- c('payoff', 'accuracy',
'dwmean_1', 'dwmean_2',
'dwmean_3', 'dwmean_4')
match <- match(colnames(expe_summary_before)[-1], colnames(model_summary)[-c(1, 2)])
model_summary_before <- model_summary %>%
filter(afterbreak == 0) %>%
select(-c(1, 2)) %>%
select(all_of(match))
model_summary_after <- model_summary %>%
filter(afterbreak == 1) %>%
select(-c(1, 2)) %>%
select(all_of(match))
# 针对before和after分别处理
## 计算experiment data的方差
before_devs <- c()
after_devs <- c()
for (i in 2:20){
before_devs <- c(before_devs, var(expe_summary_before[, i]))
after_devs <- c(after_devs, var(expe_summary_after[, i]))
}
PM_expe_before <- expe_summary_before[, -1] %>%
summarise_all(mean)
PM_expe_after <- expe_summary_after[, -1] %>%
summarise_all(mean)
weight <- c(1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1)
calc_error <- function(n, data1, data2, devs){
errors <- c()
PM_model <- data1[n, ]
for(i in 1:19){
error <- weight[i] * (as.vector(t(((PM_model[, i]-data2[, i])^2)/devs[i])))
errors <- c(errors, error)
}
return(errors)
}
## Before break
before_errors <- c()
PM_error_before <- data.frame()
for(n in 1:nrow(model_summary_before)){
one_error <- calc_error(n, model_summary_before, PM_expe_before, before_devs)
before_errors <- c(before_errors, sum(one_error))
PM_error_before <- rbind(PM_error_before, one_error)
colnames(PM_error_before) <- colnames(model_summary_before)
}
## After break
after_errors <- c()
PM_error_after <- data.frame()
for(n in 1:nrow(model_summary_after)){
one_error <- calc_error(n, model_summary_after, PM_expe_after, after_devs)
after_errors <- c(after_errors, sum(one_error))
PM_error_after <- rbind(PM_error_after, one_error)
colnames(PM_error_after) <- colnames(model_summary_after)
}
## Draw a plot to show the distribution of errors
plot_before <- data.frame("Errors" = before_errors)
plot_after <- data.frame("Errors" = after_errors)
ggplot(plot_before, aes(x = Errors)) +
geom_density(color = 'red', linewidth = 1.5)
ggplot(plot_after, aes(x = Errors)) +
geom_density(color = "blue", linewidth = 1.5)
## Find the top 20 minimal parameter
before_rank <- order(before_errors)[1:20]
after_rank <- order(after_errors)[1:20]
before_para <- Param.df[before_rank, ][, -1]
after_para <- Param.df[after_rank, ][, -1]
## Generate another Monte Carlo sets
second_before <- data.frame()
second_after <- data.frame()
for(i in 1:20){
first_before <- c(before_para[i, ])
first_after <- c(after_para[i, ])
add <- data.frame(a_schema = rep(0, 10),
h_schema = rep(0, 10),
Beta_N = runif(10, -0.06, 0.06),
Beta_Var= rep(0, 10),
a_generic  = rep(0, 10),
h_generic = rep(0, 10),
Beta_gN = runif(10, -0.1, 0.1),
Beta_gVar = rep(0, 10),
w = runif(10, -0.08, 0.08),
Phi = runif(10, -10, 10),
decay_speed = runif(10, -0.02, 0.02),
decay_speed_thres = runif(10, -0.01, 0.01),
thres_item_inter  = rep(0, 10),
thres_item_final = runif(10, -49, 49),
thres_schema = runif(10, -4.725, 4.725),
theta_shift = round((runif(10, -7.6, 7.6)), 0),
timevar = rep(0, 10),
modeltimestep = rep(0, 10))
second_before <- rbind(second_before, first_before+add)
second_after <- rbind(second_after, first_after+add)
}
final_second_before <- second_before %>%
filter(w < 1 & Phi > 0 & decay_speed < 1 &
decay_speed_thres < 1 & theta_shift > 1 &
Beta_gN < 1 & Beta_N < 0.7)
final_second_after <- second_after %>%
filter(w < 1 & Phi > 0 & decay_speed < 1 &
decay_speed_thres < 1 & theta_shift > 1 &
Beta_gN < 1 & Beta_N < 0.7)
final_second_before$Subject <- 1:nrow(final_second_before)
final_second_after$Subject <- 1:nrow(final_second_after)
final_second_before <- select(final_second_before, 19, 1:18)
final_second_after <- select(final_second_after, 19, 1:18)
## 输出文件
output_before <- paste0("Step3/", type, "_2/", group, "/bef_Paras.csv")
output_after <- paste0("Step3/", type, "_2/", group, "/aft_Paras.csv")
write.csv(final_second_before, output_before, row.names = F)
write.csv(final_second_after, output_after, row.names = F)
min(before_errors)
which.min(before_errors)
Param.df[which.min(before_errors), ]
Param.df[which.min(after_errors), ]
